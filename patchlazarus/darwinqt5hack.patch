Index: ide/applicationbundle.pas
===================================================================
--- ide/applicationbundle.pas	(revision 56789)
+++ ide/applicationbundle.pas	(working copy)
@@ -55,6 +55,8 @@
   ContentsDirName = 'Contents';
   MacOSDirName = 'MacOS';
   ResourcesDirName = 'Resources';
+  FrameworksDirName = 'Frameworks';
+  PluginsDirName = 'Plugins';
   PropertyListFileName = 'Info.plist';
   PackageInfoFileName = 'PkgInfo';
   PackageInfoHeader = 'APPL????';
@@ -61,6 +63,13 @@
   
 implementation
 
+{$ifdef Unix}
+{$ifdef LCLQT5}
+uses
+  Unix, BaseUnix;
+{$endif}
+{$endif}
+
 { TApplicationPropertyList }
 
 constructor TApplicationPropertyList.Create(const ExeName: String; Title: String; const Version: String = '0.1');
@@ -120,12 +129,68 @@
 
 function CreateApplicationBundle(const Filename: String; Title: String;
   Recreate: boolean): TModalResult;
+{$ifdef Unix}
+{$ifdef LCLQT5}
+function CreateQT5Symlinks(aApp:string):boolean;
 var
+  DirectoriesFoundList,FilesFoundList : TStringList;
+  DirCounter,FileCounter:integer;
+  FrameworkDir,FrameworkName,FileToLink:string;
+  success:boolean;
+begin
+  // create symlinks for Frameworks to save space
+  result:=true;
+  DirectoriesFoundList := FindAllDirectories(aApp,False);
+  try
+    for DirCounter := 0 to DirectoriesFoundList.Count -1 do
+    begin
+      FrameworkDir := ExcludeTrailingPathDelimiter(DirectoriesFoundList.Strings[DirCounter]);
+      FrameworkName := ExtractFileNameOnly(FrameworkDir);
+      FilesFoundList := FindAllFiles(FrameworkDir+'/Versions');
+      try
+        for FileCounter := 0 to FilesFoundList.Count -1 do
+        begin
+          FileToLink := FilesFoundList.Strings[FileCounter];
+          if ExtractFileName(FileToLink) = FrameworkName then
+          begin
+            FileToLink:=CreateRelativePath(FileToLink,FrameworkDir);
+
+            // do we already have some sort of file ?
+            if (FileExists(FrameworkDir+'/'+FrameworkName)) then
+            begin
+              // if its not a link, then delete file !! tricky ...
+              if (FpReadLink(FrameworkDir+'/'+FrameworkName) = '') then DeleteFile(FrameworkDir+'/'+FrameworkName);
+            end;
+
+            if (NOT FileExists(FrameworkDir+'/'+FrameworkName)) then
+            begin
+              // create the symlink towards the base framework library
+              success:=(FPSymLink(PChar(FileToLink),PChar(FrameworkDir+'/'+FrameworkName))=0);
+              if NOT success then result:=false;
+            end;
+
+          end;
+        end;
+      finally
+        FilesFoundList.Free;
+      end;
+    end;
+  finally
+    DirectoriesFoundList.Free;
+  end;
+end;
+{$endif}
+{$endif}
+var
   AppBundleDir: String;
   ContentsDir: String;
   MacOSDir: String;
   ResourcesDir: String;
   sl: TStrings;
+  {$ifdef LCLQT5}
+  SelfBundleName: String;
+  x:integer;
+  {$endif}
 begin
   AppBundleDir := ExtractFileNameWithoutExt(Filename) + ApplicationBundleExt + PathDelim;
   if not Recreate and DirectoryExistsUTF8(AppBundleDir) then exit(mrOk);
@@ -154,6 +219,33 @@
   Result:=ForceDirectoryInteractive(ResourcesDir,[mbIgnore,mbRetry]);
   if Result<>mrOk then exit;
 
+  {$ifdef LCLQT5}
+  // create 'applicationname.app/Contents/Frameworks/' directory
+  Result:=ForceDirectoryInteractive(ContentsDir + FrameworksDirName + PathDelim,[mbIgnore,mbRetry]);
+  if Result<>mrOk then exit;
+  // create 'applicationname.app/Contents/Plugins/' directory
+  Result:=ForceDirectoryInteractive(ContentsDir + PluginsDirName + PathDelim,[mbIgnore,mbRetry]);
+  if Result<>mrOk then exit;
+
+  // this can be very wrong, but wrong part will be removed below.
+  SelfBundleName := ExtractFileNameWithoutExt(Application.ExeName) + ApplicationBundleExt;
+
+  // we only want the .app bundle name, so remove shit ... ;-)
+  x:=pos(PathDelim + ContentsDirName + PathDelim + MacOSDirName,SelfBundleName);
+  if x>0 then
+     Delete(SelfBundleName,x,MaxInt);
+
+  if FileIsSymlink(SelfBundleName) then
+     SelfBundleName:=GetPhysicalFilename(SelfBundleName,pfeOriginal);
+
+  FileUtil.CopyDirTree(SelfBundleName + PathDelim + ContentsDirName + PathDelim + FrameworksDirName,AppBundleDir + ContentsDirName + PathDelim + FrameworksDirName,[cffOverwriteFile,cffCreateDestDirectory]);
+  {$ifdef Unix}
+  CreateQT5Symlinks(AppBundleDir + ContentsDirName + PathDelim + FrameworksDirName);
+  {$endif}
+
+  FileUtil.CopyDirTree(SelfBundleName + PathDelim + ContentsDirName + PathDelim + PluginsDirName,AppBundleDir + ContentsDirName + PathDelim + PluginsDirName,[cffOverwriteFile,cffCreateDestDirectory]);
+  {$endif}
+
   Result:=mrOk;
 end;
 
Index: ide/debugmanager.pas
===================================================================
--- ide/debugmanager.pas	(revision 56789)
+++ ide/debugmanager.pas	(working copy)
@@ -2171,7 +2171,11 @@
   *)
   if NewDebuggerClass.RequiresLocalExecutable then begin
 
+    {$ifndef LCLQT5}
     if BuildBoss.GetProjectUsesAppBundle then
+    {$else}
+    if True then
+    {$endif}
     begin
       // it is Application Bundle (darwin only)
 
@@ -2180,10 +2184,14 @@
         if not PromptOnError then
           ClearPathAndExe
         else
+          {$ifndef LCLQT5}
           if IDEMessageDialog(lisLaunchingApplicationInvalid,
             Format(lisTheLaunchingApplicationBundleDoesNotExists,
               [LaunchingApplication, LineEnding, LineEnding, LineEnding+LineEnding]),
             mtError, [mbYes, mbNo, mbCancel]) = mrYes then
+          {$else}
+          if True then
+          {$endif}
           begin
             if not BuildBoss.CreateProjectApplicationBundle then Exit;
           end
