--- source/crypto/xlsxdecrypter.pas	Tue Mar 14 22:48:29 2017
+++ source/crypto/xlsxdecrypter.pas	Wed Jan 01 10:39:42 2020
@@ -77,8 +77,8 @@
     { Defined in Section 2.3.3  [MS-OFFCRYPTO] }
     TEncryptionVerifier = record
       SaltSize             : DWord;
-      Salt                 : array[0..15] of Byte;
-      EncryptedVerifier    : array[0..15] of Byte;
+      Salt                 : TBytes;
+      EncryptedVerifier    : TBytes;
       VerifierHashSize     : DWord;
       EncryptedVerifierHash: array[0..31] of Byte; // RC4 needs only 20 bytes
     end;
@@ -284,7 +284,9 @@
         if FEncInfo.Verifier.SaltSize <> 16 then
           raise Exception.Create('Incorrect salt size');
 
+        SetLength(Salt, SaltSize);
         EncInfoStream.ReadBuffer(Salt[0], SaltSize);
+        SetLength(EncryptedVerifier, SaltSize);
         EncInfoStream.ReadBuffer(EncryptedVerifier[0], SaltSize);
 
         VerifierHashSize   := EncInfoStream.ReadDWord;
@@ -316,7 +318,8 @@
   AES_Cipher: TDCP_rijndael;
 
   ConcArr : TBytes;
-  LastHash: TSHA1Digest;
+  LastHash: TBytes;
+  LastHashBuffer: TSHA1Digest;
 
   Iterator, i: DWord;
 
@@ -331,6 +334,8 @@
   VerifierHash: array[0..31] of Byte;// Needs only 20bytes to hold the SHA1
                                      // but needs 32bytes to hold the decrypted hash
 begin
+  SetLength(LastHash,Length(TSHA1Digest));
+
   // if no password used, use microsoft default.
   if APassword = '' then
     APassword := 'VelvetSweatshop';
@@ -343,18 +348,22 @@
   ConcatToByteArray( ConcArr
                    , FEncInfo.Verifier.Salt
                    , TEncoding.Unicode.GetBytes(APassword));
-  LastHash := SHA1Buffer( ConcArr[0], Length(ConcArr) );
+
+  LastHashBuffer := SHA1Buffer( ConcArr[0], Length(ConcArr) );
+  Move(LastHashBuffer[0], LastHash[0], Length(TSHA1Digest));
 
   // 1.2.Calculate SHA1(n) = SHA1(iterator + SHA1(n-1) ) -- iterator is 32bit
   for  Iterator := 0 to 49999 do
   begin
     ConcatToByteArray(ConcArr, Iterator, LastHash);
-    LastHash := SHA1Buffer( ConcArr[0], Length(ConcArr) );
+    LastHashBuffer := SHA1Buffer( ConcArr[0], Length(ConcArr) );
+    Move(LastHashBuffer[0], LastHash[0], Length(TSHA1Digest));
   end;
 
   // 1.3.Claculate final hash, SHA1(final) = SHA1(H(n) + block) -- block = 0 (32bit)
   ConcatToByteArray(ConcArr, LastHash, 0);
-  LastHash := SHA1Buffer( ConcArr[0], Length(ConcArr) );
+  LastHashBuffer := SHA1Buffer( ConcArr[0], Length(ConcArr) );
+  Move(LastHashBuffer[0], LastHash[0], Length(TSHA1Digest));
 
 
   //// 2.Derive the encryption key.
@@ -412,7 +421,8 @@
   AES_Cipher.Free;
 
   // 4. Calculate SHA1(Verifier)
-  LastHash := SHA1Buffer(Verifier[0], Length(Verifier));
+  LastHashBuffer := SHA1Buffer(Verifier[0], Length(Verifier));
+  Move(LastHashBuffer[0], LastHash[0], Length(TSHA1Digest));
 
   // 5. Compare results
   Result := (CompareByte( LastHash[0], VerifierHash[0], 20) = 0);
--- source/visual/fpspreadsheetctrls.pas	Wed Jul 24 09:23:38 2019
+++ source/visual/fpspreadsheetctrls.pas	Tue Jan 28 18:51:45 2020
@@ -1426,6 +1426,8 @@
   stream: TStream;
   savedCSVParams: TsCSVParams;
   s: String;
+  range: Integer;
+  r,c: Cardinal;
 
   procedure CopyToClipboard(AStream: TStream; AFileFormat: TsSpreadsheetFormat;
     AClipboardFormat: Integer; AParams: TsStreamParams = []);
@@ -1460,6 +1462,8 @@
       (stream as TMemoryStream).Clear;
       }
 
+      {$ifndef LCLCOCOA}
+
       // Write BIFF8 format
       CopyToClipboard(stream, sfExcel8, cfBiff8Format);
 
@@ -1498,6 +1502,34 @@
         CSVParams := savedCSVParams;
       end;
 
+      {$else}
+
+      // Only write simple TEXT format
+      // Up until now, nothing else works on Cocoa
+
+      for range := Low(sel) to High(sel) do
+      begin
+        for r := sel[range].Row1 to sel[range].Row2 do
+        begin
+          for c := sel[range].Col1 to sel[range].Col2 do
+          begin
+            s := FWorksheet.ReadAsText(r, c);
+            stream.Write(s[1], Length(s));
+            stream.WriteByte(9);
+          end;
+          if (DefaultTextLineBreakStyle=tlbsCRLF) OR (DefaultTextLineBreakStyle=tlbsCR) then
+            stream.WriteByte(13);
+          if (DefaultTextLineBreakStyle=tlbsCRLF) OR (DefaultTextLineBreakStyle=tlbsLF) then
+            stream.WriteByte(10);
+        end;
+      end;
+      stream.WriteByte(0);
+      stream.Position := 0;
+      Clipboard.AddFormat(CF_TEXT, stream);
+      (stream as TMemoryStream).Clear;
+
+      {$endif LCLCOCOA}
+
       // To do: XML format, ods format
     finally
       stream.Free;
@@ -1533,9 +1565,11 @@
   fmt: TsSpreadsheetFormat;
   stream: TStream;
   params: TsStreamParams;
+  savedCSVParams: TsCSVParams;
 begin
   stream := TMemoryStream.Create;
   try
+    savedCSVParams := CSVParams;
     params := [spClipboard];
     // Check whether the clipboard content is suitable for fpspreadsheet
     {if Clipboard.GetFormat(cfOpenDocumentFormat, stream) then
@@ -1553,7 +1587,13 @@
     else if Clipboard.GetFormat(cfCSVFormat, stream) then
       fmt := sfCSV
     else if Clipboard.GetFormat(CF_TEXT, stream) then
+    begin
+      {$ifdef LCLCOCOA}
+      //Only CF_TEXT works on Cocoa
+      CsvParams.Delimiter := #9;
+      {$endif LCLCOCOA}
       fmt := sfCSV
+    end
     else begin
       // Exit if there are no spreadsheet data in clipboard
       MessageDlg('No appropriate spreadsheet data in clipboard', mtError, [mbOk], 0);
@@ -1563,6 +1603,8 @@
     // Paste stream into workbook
     stream.Position := 0;
     FWorkbook.PasteFromClipboardStream(stream, fmt, AItem, params, ATransposed);
+
+    CSVParams:=savedCSVParams;
 
     // To do: XML format, ods format
   finally
